import asyncio
import logging
import sys
from typing import Any

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandObject, CommandStart
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold, hitalic, hunderline, hblockquote
from aiogram.fsm.context import FSMContext

from settings import bot_config
from states.states import ChoiceCityWeather
from keyboards.default.menu import *
from api_requests import request
from database import orm

bot = Bot(token=bot_config.BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()
dp.include_router(router)


async def main():
    await dp.start_polling(bot)


@dp.message(CommandStart())
async def start_message(message: Message):
    orm.add_user(message.from_user.id)
    text = (f'–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.first_name)}! –Ø –±–æ—Ç,'
            f' –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ –æ –ø–æ–≥–æ–¥–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!')
    await message.answer(text=text)
    await show_menu(message)


@dp.message(F.text == weather_my_city)
@dp.message(F.text == weather_history)
@dp.message(F.text == weather_set_city)
async def get_user_city_weather(message: Message):
    await no_such_function


@dp.message(F.text == weather_menu)
async def show_menu(message: Message):
    await message.delete()
    btn1 = KeyboardButton(text=weather_my_city)
    btn2 = KeyboardButton(text=weather_other_place)
    btn3 = KeyboardButton(text=weather_history)
    btn4 = KeyboardButton(text=weather_set_city)
    markup = ReplyKeyboardMarkup(keyboard=[[btn1, btn2], [btn3, btn4]],
                                 resize_keyboard=True, one_time_keyboard=True)
    await message.answer(text='–ú–µ–Ω—é:', reply_markup=markup)


@dp.message(F.text == weather_other_place)
async def city_start(message: Message, state: FSMContext):
    btn1 = KeyboardButton(text=weather_menu)
    markup = ReplyKeyboardMarkup(keyboard=[[btn1]], resize_keyboard=True)
    text = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞'
    await message.answer(text=text, reply_markup=markup)
    await state.set_state(ChoiceCityWeather.waiting_city)


@dp.message(ChoiceCityWeather.waiting_city)
async def city_chosen(message: Message, state: FSMContext):
    if message.text[0].islower():
        await message.answer(text='–ù–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –ø–∏—à—É—Ç—Å—è'
                                  ' —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã!üò°')
        return
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ä–æ–¥, –∏ —Å—Ä–∞–∑—É –¥–æ—Å—Ç–∞—ë–º.
    # –•—Ä–∞–Ω–∏—Ç—Å—è –≤—Å—ë –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.
    await state.update_data(waiting_city=message.text)
    city: dict[str, Any] = await state.get_data()
    # –¢–∞–∫ –∫–∞–∫ city - —Å–ª–æ–≤–∞—Ä—å, –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
    # —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ .get
    data = request.get_weather(city.get('waiting_city'))
    text = (f'–ü–æ–≥–æ–¥–∞ –≤ <b>{hitalic(city.get("waiting_city"))}</b>'
            f'\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data["temp"]}¬∞C'
            f'\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {data["wind_speed"]}–º/c'
            f'\n–î–∞–≤–ª–µ–Ω–∏–µ: {data["pressure_mm"]}–º–º')
    await message.answer(text=text)
    await show_menu(message)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@dp.message(F.chat.func(lambda message: message.text not in weather_buttons))
async def no_such_function(message: Message):
    btn1 = KeyboardButton(text=weather_menu)
    markup = ReplyKeyboardMarkup(keyboard=[[btn1]], resize_keyboard=True)
    await message.answer(text=wip_message, reply_markup=markup)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
